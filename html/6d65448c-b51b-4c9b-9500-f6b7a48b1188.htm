<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-zh-CN.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SqlTree 查询</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="6d65448c-b51b-4c9b-9500-f6b7a48b1188" /><meta name="Description" content="除了开发者常用的 Linq 查询，Rafy 框架还提供了 Sql 语法树的方式来进行查询。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Rafy User Guide<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy User Guide" tocid="roottoc">Rafy User Guide</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy框架" tocid="69b641cf-d1fe-4f06-877f-b479d268a3fc">Rafy框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c8e6cd25-c674-4cd1-9880-816d11f58eb8.htm" title="领域实体框架" tocid="c8e6cd25-c674-4cd1-9880-816d11f58eb8">领域实体框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7.htm" title="实体仓库" tocid="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7">实体仓库</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="59c80aec-c910-4880-b165-c3495ed5eb3e.htm" title="编写查询" tocid="59c80aec-c910-4880-b165-c3495ed5eb3e">编写查询</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c7c6d07b-bb41-4590-a2a6-8b0b49ce1c0b.htm" title="Linq 查询" tocid="c7c6d07b-bb41-4590-a2a6-8b0b49ce1c0b">Linq 查询</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="6d65448c-b51b-4c9b-9500-f6b7a48b1188.htm" title="SqlTree 查询" tocid="6d65448c-b51b-4c9b-9500-f6b7a48b1188">SqlTree 查询</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="02f40bcc-1ff3-4abc-b4a9-2dea57d516ce.htm" title="通用查询条件(CommonQueryCriteria)" tocid="02f40bcc-1ff3-4abc-b4a9-2dea57d516ce">通用查询条件(CommonQueryCriteria)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c2eced2c-e434-4d53-a06d-fbc518fbddf5.htm" title="Sql 查询" tocid="c2eced2c-e434-4d53-a06d-fbc518fbddf5">Sql 查询</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ae9a2512-1528-401a-ac4f-502304a7ae03.htm" title="分页查询" tocid="ae9a2512-1528-401a-ac4f-502304a7ae03">分页查询</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="3e3ee502-ecbb-417d-8fbf-fa24ec21e2bc.htm" title="贪婪加载" tocid="3e3ee502-ecbb-417d-8fbf-fa24ec21e2bc">贪婪加载</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="56b9e7bc-2656-4bde-95dd-69e71aeafc6a.htm" title="数据行数查询" tocid="56b9e7bc-2656-4bde-95dd-69e71aeafc6a">数据行数查询</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="55180b16-9fda-42a1-8c4f-27d037aeae76.htm" title="表格查询" tocid="55180b16-9fda-42a1-8c4f-27d037aeae76">表格查询</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>SqlTree 查询</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>除了开发者常用的 Linq 查询，Rafy 框架还提供了 Sql 语法树的方式来进行查询。</p><p>这种查询方式下，开发者不需要直接编写真正的 Sql 语句，而是转而使用一套中间 Sql 语法树对象。这隔离了与具体数据库的耦合，使得开发者编写的查询可以跨越多种不同的数据库运行，甚至可以在非关系型数据库中运行。同时，框架还结合托管属性，提供了方便开发者使用的 API，并尽量保持与传统 Sql 相近的语法，使得开发者可以快速理解并编写。</p><p>本页包含以下内容：</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#quickDemo">快速示例</a></li><li class="outlineSectionEntry"><a href="#senarios">使用场景</a></li><li class="outlineSectionEntry"><a href="#codeSnippets">代码段</a></li><li class="outlineSectionEntry"><a href="#fullDemo">更多示例</a></li></ul></div><div class="collapsibleAreaRegion" id="quickDemo"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />快速示例</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    SqlTree 查询是直接以一种类似于 Sql 语法的格式，并结合实体托管属性 <span class="code">IManagedProperty</span> 来进行查询的查询模式。如下：
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAEAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADAEAAA');return false;" title="复制">复制</a></div></div><div id="ID0EADAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[RepositoryQuery]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> ChapterList GetBy(<span class="highlight-keyword">string</span> name, PagingInfo pi)
{
    <span class="highlight-keyword">var</span> f = QueryFactory.Instance;

    <span class="highlight-keyword">var</span> t = f.Table&lt;Chapter&gt;();

    <span class="highlight-keyword">var</span> q = f.Query(
        selection: t.Star(),<span class="highlight-comment">//查询所有列</span>
        <span class="highlight-keyword">from</span>: t,<span class="highlight-comment">//要查询的实体的表</span>
        <span class="highlight-keyword">where</span>: t.Column(Chapter.NameProperty).Contains(name)<span class="highlight-comment">//where 条件,</span>
        orderBy: <span class="highlight-keyword">new</span> List&lt;IOrderBy&gt; {<span class="highlight-comment">//排序</span>
            f.OrderBy(source.Column(Chapter.NameProperty), OrderDirection.Ascending)
        }
    );

    <span class="highlight-keyword">return</span> (ChapterList)<span class="highlight-keyword">this</span>.QueryData(q, pi);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAEAAA");</script><p>
                    可以看到，SqlTree 语法非常简单：
                </p><ul><li><p>
                            通过 <span class="code">QueryFactory.Instance</span> 类型的单例对象来定义整个 SqlTree 查询对象。
                        </p></li><li><p>
                            查询中使用的是实体类型(<span class="code">Chapter</span>)和实体的托管属性(<span class="code">Chapter.NameProperty</span>)来定义表和字段。
                        </p></li></ul><p>
                    更多的查询语法示例，见本节后面的 <a href="#fullDemo">更多示例</a>。
                </p></div><div class="collapsibleAreaRegion" id="senarios"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />使用场景</span></div><div id="ID2RBSection" class="collapsibleSection"><p>当您处于以下场景时，需要使用 SqlTree 查询：</p><ul><li><p>Linq 查询无法支持的一些场景。</p><p>Linq 查询目前只支持有限的一些操作符的解析，以及不太复杂的关系的分析。所以当您的查询较为复杂，已经无法使用 Linq 查询来实现时，可以考虑使用 SqlTree 查询。</p></li><li><p>需要更精确地控制 Sql 语句。</p><p>如果想要更加精确地控制最终生成的 Sql 语句，也需要使用 SqlTree。</p><p>例如，Linq 查询中需要两个实体有确切的实体关系才会最终生成 Join 语句；但是 SqlTree 则与 Sql 语句无异，开发者可以随意将两个实体对应的表进行 Join 操作。</p></li><li><p>需要更好的性能。</p><p>
                            SqlTree 查询是 Rafy 框架查询数据（表格、实体）的核心实现。在框架底层，Linq 查询也都是完全是基于 SqlTree 查询来实现的。当开发者在使用 Linq 查询时，编译器其实是生成一组对象来表示一棵表达式树，而 Rafy 框架会解析这棵树，生成更加底层的 SqlTree 对象，才交给执行引擎去生成真正的 Sql 语句并最终执行。所以，直接使用 SqlTree 则节约了表达式树的生成（大量反射与对象）与解析的性能消耗。
                        </p><p>
                            同样，Rafy 没有象 Hibernate 框架定义一套新的基于字符串的查询语法（如 hql），也是因为开发者编写 hql，不但无法得到编译时的语法支持，而且性能上也需要消耗对 hql 进行解析并生成 SqlTree，不如直接使用更直接的 SqlTree。
                        </p><p>
                            当然，Rafy 在 SqlTree 的基础上再推出 Linq 查询的原因，是因为 SqlTree 本身需要一定的学习周期才能使用，而开发者则更熟悉使用 Linq 语法进行查询，基本可以认为是上手即用，所以支持 Linq 查询可以简化大部分的简单开发场景。
                        </p></li><li><p>希望编写更通用的查询。</p><p>
                            仓库基类 EntityRepository 中自带的 GetAll、GetById 等方法，都是面向所有实体类型的非常通用的查询。对于基于 Rafy 的上层框架的开发者而言，除了直接使用这些自带的通用查询，很多时候是需要自行编写一些类似的通用查询的。
                        </p><p>
                            Linq 的 Labmda 语法中的属性表达式(e.Name)需要绑定具体的实体类型(Book e)，这导致了必须使用反射去生成表达式树，才能编写通条蚁。但是，SqlTree 的语法是基于托管属性框架的，它不需要使用确切的实体属性表达式，只需要使用托管属性的运行时对象 IManagedProperty 即可(Book.NameProperty)。这使得开发人员可以更加方便地编写通用查询。例如，仓库基类 EntityRepository 中的所有查询方法，都是直接通过使用实体的托管属性来实现的，例如：GetById、GetByParentId、GetAll 等。
                        </p></li><li><p>可以为扩展属性编写查询。</p><p>由于扩展属性写在额外的程序集插件中的，所以当无法通过 Linq 表达式进行查询。这时就不得不通过托管属性 IManagedProperty 来定义 SqlTree 完成查询了。</p><p>
                            关于扩展属性，参见：<a href="5a705045-b57e-46ab-be03-18183495d690.htm">实体属性扩展</a>。
                        </p></li><li><p>支持多个数据库。</p><p>上述的场景中，其实还可以直接编写 Sql 语句来进行查询。但是这样就很难保证开发者编写的 Sql 语句能够在多个数据库上能够正确运行。</p></li><li><p>查询需要支持仓库数据层的扩展点。</p><p>由于 Rafy 的查询核心都是基于 SqlTree 来实现的，所以内部的所有扩展点都是要依赖 SqlTree的。如果开发者直接编写 Sql 语句来查询，那么这些许多的扩展点都将无效，无法对开发者编写的这条 Sql 语句进行扩展。</p><p>
                            例如：当使用 <a href="f662f88a-8221-49f4-bc38-901134ea893e.htm">幽灵插件</a> 对所有幽灵数据进行自动过滤时，如果开发者使用手工编写的 Sql 语法进行查询，那么自动过滤功能无效，需要开发者自己进行幽灵数据的过滤。
                        </p></li></ul></div><div class="collapsibleAreaRegion" id="codeSnippets"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />代码段</span></div><div id="ID3RBSection" class="collapsibleSection"><p>RafySDK 中提供了两个代码段，来辅助开发者生成基本的 SqlTree 查询结构：Rafy_Query、Rafy_Query_TableQueryContent。</p><p>
                    详情见：<a href="6b3e8163-8516-4065-91f5-194491334343.htm">代码段</a>。
                </p></div><div class="collapsibleAreaRegion" id="fullDemo"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />更多示例</span></div><div id="ID4RBSection" class="collapsibleSection"><p>下面将会列出一些常见的 SqlTree 查询示例。通过这些代码，您将学习到如何在各种查询需求下使用 SqlTree。</p><ul><li><p>基础查询：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAIBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAIBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAIBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAIBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[RepositoryQuery]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> ChapterList GetBy(<span class="highlight-keyword">string</span> name, PagingInfo pi)
{
    <span class="highlight-keyword">var</span> f = QueryFactory.Instance;

    <span class="highlight-keyword">var</span> t = f.Table&lt;Chapter&gt;();

    <span class="highlight-keyword">var</span> q = f.Query(
        <span class="highlight-comment">//selection: f.SelectAll(),//没有 selection，则默认表示查询所有列</span>
        <span class="highlight-keyword">from</span>: t,<span class="highlight-comment">//要查询的实体的表</span>
        <span class="highlight-keyword">where</span>: t.Column(Chapter.NameProperty).Contains(name)<span class="highlight-comment">//where 条件</span>
    );

    <span class="highlight-keyword">return</span> (ChapterList)<span class="highlight-keyword">this</span>.QueryData(q, pi);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAIBABAAA");</script></li><li><p>表格数据查询：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAHBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAHBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAHBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAHBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[RepositoryQuery]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> LiteDataTable GetBy(<span class="highlight-keyword">string</span> name, PagingInfo pi)
{
    <span class="highlight-keyword">var</span> f = QueryFactory.Instance;

    <span class="highlight-keyword">var</span> t = f.Table(<span class="highlight-keyword">this</span>);<span class="highlight-comment">//使用当前的仓库来表示当前的表</span>

    <span class="highlight-keyword">var</span> q = f.Query(
        <span class="highlight-keyword">from</span>: t,
        <span class="highlight-keyword">where</span>: t.Column(Chapter.NameProperty).Contains(name)
    );

    <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.QueryTable(q, pi);<span class="highlight-comment">//由查询实体变为查询数据表格，只是更换了这一行代码。</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAHBABAAA");</script></li><li><p>两个列的条件进行比较：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAGBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAGBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAGBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAGBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> table = f.Table&lt;Chapter&gt;();
<span class="highlight-keyword">var</span> q = f.Query(
    <span class="highlight-keyword">from</span>: table,
    <span class="highlight-keyword">where</span>: table.Column(Chapter.NameProperty).Equal(table.Column(Chapter.CodeProperty))<span class="highlight-comment">//两个列相等</span>
);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAGBABAAA");</script></li><li><p>使用 And、Or：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAFBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAFBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAFBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAFBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> table = f.Table(<span class="highlight-keyword">this</span>);
<span class="highlight-keyword">var</span> q = f.Query(
    <span class="highlight-keyword">from</span>: table,
    <span class="highlight-keyword">where</span>: f.And(
        table.Column(Chapter.NameProperty).Equal(name),
        f.Or(
            table.Column(Chapter.IdProperty).LessEqual(<span class="highlight-number">10</span>),
            table.Column(Chapter.IdProperty).GreaterEqual(<span class="highlight-number">1000</span>)
        )
    )
);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAFBABAAA");</script></li><li><p>
                            Join（<span class="code">SerialNumberValueRepository</span> 中的真实代码）：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAEBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAEBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAEBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAEBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// 获取某个规则下最新的一个值。</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="autoCodeName"&gt;&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
[RepositoryQuery]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SerialNumberValue GetLastValue(<span class="highlight-keyword">string</span> autoCodeName)
{
    <span class="highlight-keyword">var</span> f = QueryFactory.Instance;
    <span class="highlight-keyword">var</span> t = f.Table&lt;SerialNumberValue&gt;();
    <span class="highlight-keyword">var</span> t2 = f.Table&lt;SerialNumberInfo&gt;();
    <span class="highlight-keyword">var</span> q = f.Query(
        <span class="highlight-keyword">from</span>: t.Join(t2),<span class="highlight-comment">//由于 SerialNumberValue 有一个 SerialNumberInfo 的引用属性，则在使用 Join 时，不需要给出 Join 的条件。</span>
        <span class="highlight-keyword">where</span>: t2.Column(SerialNumberInfo.NameProperty).Equal(autoCodeName),
        orderBy: <span class="highlight-keyword">new</span> List&lt;IOrderBy&gt; { f.OrderBy(t.Column(SerialNumberValue.LastUpdatedTimeProperty), OrderDirection.Descending) }
    );

    <span class="highlight-keyword">return</span> (SerialNumberValue)<span class="highlight-keyword">this</span>.QueryData(q);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEBABAAA");</script></li><li><p>
                            使用完整的 Join：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAADBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAADBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAADBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAADBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> t = f.Table&lt;SerialNumberValue&gt;();
<span class="highlight-keyword">var</span> t2 = f.Table&lt;SerialNumberInfo&gt;();
<span class="highlight-keyword">var</span> q = f.Query(
    <span class="highlight-keyword">from</span>: t.Join(t2, t.Column(SerialNumberValue.SerialNumberInfoIdProperty).Equal(t2.Column(SerialNumberInfo.IdProperty)), JoinType.Inner),<span class="highlight-comment">//不但可以给出具体的 Join 条件，还可以给出 Join 类型。</span>
    <span class="highlight-keyword">where</span>: t2.Column(SerialNumberInfo.NameProperty).Equal(autoCodeName),
    orderBy: <span class="highlight-keyword">new</span> List&lt;IOrderBy&gt; { f.OrderBy(t.Column(SerialNumberValue.LastUpdatedTimeProperty), OrderDirection.Descending) }
);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAADBABAAA");</script></li><li><p>嵌套子查询（Exists）：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAACBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> bookTable = f.Table(<span class="highlight-keyword">this</span>);
<span class="highlight-keyword">var</span> chapterTable = f.Table&lt;Chapter&gt;();
<span class="highlight-keyword">var</span> q = f.Query(
    <span class="highlight-keyword">from</span>: bookTable,
    <span class="highlight-keyword">where</span>: f.Exists(f.Query(
        <span class="highlight-keyword">from</span>: chapterTable,
        <span class="highlight-keyword">where</span>: chapterTable.Column(Chapter.BookIdProperty).Equal(bookTable.IdColumn)
    ))
);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBABAAA");</script></li><li><p>Not Exists：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAABBABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> book = f.Table(<span class="highlight-keyword">this</span>);
<span class="highlight-keyword">var</span> chapter = f.Table&lt;Chapter&gt;();
<span class="highlight-keyword">var</span> q = f.Query(
    <span class="highlight-keyword">from</span>: book,
    <span class="highlight-keyword">where</span>: f.Not(f.Exists(f.Query(
        <span class="highlight-keyword">from</span>: chapter,
        <span class="highlight-keyword">where</span>: f.And(
            chapter.Column(Chapter.BookIdProperty).Equal(bookTable.IdColumn),
            chapter.Column(Chapter.NameProperty).NotEqual(<span class="highlight-literal">"chapterName"</span>)
        )
    )))
);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBABAAA");</script></li><li><p>Linq 查询与 SqlTree 混合使用</p><p>
                            Linq 查询与 SqlTree 查询是可以混用的。您可以先使用 Linq 查询来快速构造简单的查询条件，然后再通过 <span class="code">IQuery ConvertToQuery(IQueryable queryable)</span> 方法，传入 Linq 查询对象 IQueryable 并转换为 SqlTree 查询对象 IQuery，然后再修改 SqlTree 中的对象节点。
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[RepositoryQuery]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> ChapterList GetByBookName(<span class="highlight-keyword">string</span> name)
{
    <span class="highlight-keyword">var</span> q = <span class="highlight-keyword">this</span>.CreateLinqQuery();
    q = q.Where(c =&gt; c.Book.Name == name);

    <span class="highlight-keyword">var</span> tree = <span class="highlight-keyword">this</span>.ConvertToQuery(q);<span class="highlight-comment">//从 IQueryable 转换为 IQuery</span>

    <span class="highlight-keyword">var</span> f = QueryFactory.Instance;
    <span class="highlight-keyword">var</span> t = tree.MainTable;

    tree.Where = f.And(tree.Where, t.Column(Chapter.NameProperty).Equal(name));

    <span class="highlight-keyword">return</span> (ChapterList)<span class="highlight-keyword">this</span>.QueryData(tree);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABABAAA");</script></li></ul><p>更多示例，请参照源码中单元测试的 ORMTest 中的 TableQuery 相关方法。</p></div></div></div><div id="pageFooter" class="pageFooter">有问题请联系 9474649@qq.com。<div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:9474649%40qq.com?Subject=Rafy User Guide">发送反馈</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>