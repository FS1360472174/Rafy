<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-zh-CN.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>一般属性</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="3ad175ff-a917-4e84-931f-f845285187ed" /><meta name="Description" content="一般属性用于存储实体中的一个值数据。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Rafy User Guide<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy User Guide" tocid="roottoc">Rafy User Guide</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy框架" tocid="69b641cf-d1fe-4f06-877f-b479d268a3fc">Rafy框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c8e6cd25-c674-4cd1-9880-816d11f58eb8.htm" title="领域实体框架" tocid="c8e6cd25-c674-4cd1-9880-816d11f58eb8">领域实体框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="e9998e68-31e8-47d6-9e28-829aade5044e.htm" title="领域实体" tocid="e9998e68-31e8-47d6-9e28-829aade5044e">领域实体</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="8c0065bc-f165-4c69-81f4-9c3c57bd9ab9.htm" title="实体属性" tocid="8c0065bc-f165-4c69-81f4-9c3c57bd9ab9">实体属性</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="3ad175ff-a917-4e84-931f-f845285187ed.htm" title="一般属性" tocid="3ad175ff-a917-4e84-931f-f845285187ed">一般属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="bae4aeb4-e6a9-4d1f-9bbd-1a4199303ba5.htm" title="引用属性" tocid="bae4aeb4-e6a9-4d1f-9bbd-1a4199303ba5">引用属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="770d700d-acf8-40fd-abc2-a580725a14fb.htm" title="组合子属性" tocid="770d700d-acf8-40fd-abc2-a580725a14fb">组合子属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0eaa08ea-b1fc-42c6-8d48-2ed176b945c1.htm" title="冗余属性" tocid="0eaa08ea-b1fc-42c6-8d48-2ed176b945c1">冗余属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8120fc14-ef61-43cd-99a5-21c6edd5d38b.htm" title="大数据属性" tocid="8120fc14-ef61-43cd-99a5-21c6edd5d38b">大数据属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="711304c2-d2a3-4ec9-abd8-00edd86fb3ca.htm" title="只读属性" tocid="711304c2-d2a3-4ec9-abd8-00edd86fb3ca">只读属性</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>一般属性</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>一般属性用于存储实体中的一个值数据。</p><p>本页包含以下内容：</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#exap">示例</a></li><li class="outlineSectionEntry"><a href="#ptype">支持的属性类型</a></li><li class="outlineSectionEntry"><a href="#propertyLogic">属性逻辑扩展</a></li></ul></div><div class="collapsibleAreaRegion" id="exap"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />示例</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    以下代码为 <span class="code">Warehouse</span> 类声明了一个名称为 <span class="code">Name</span> 的一般属性。
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABADAAA_tab1" class="codeSnippetContainerTabSingle">属性声明示例</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABADAAA');return false;" title="复制">复制</a></div></div><div id="ID0EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Property&lt;<span class="highlight-keyword">string</span>&gt; NameProperty = P&lt;Warehouse&gt;.Register(e =&gt; e.Name);
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name
{
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.GetProperty(NameProperty); }
    <span class="highlight-keyword">set</span> { <span class="highlight-keyword">this</span>.SetProperty(NameProperty, <span class="highlight-keyword">value</span>); }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABADAAA");</script><p>一般属性包含一个类型为 Property&lt;T&gt; 的属性标识，以及一个对应的 CLR 属性包装。</p></div><div class="collapsibleAreaRegion" id="ptype"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />支持的属性类型</span></div><div id="ID2RBSection" class="collapsibleSection"><p>一般属性可以声明为任何类型。但是只支持以下类型属性类型（如果该类型是值类型，则包含相应的可空类型。）到数据库的映射：</p><ul><li><p>string</p></li><li><p>bool、bool?</p></li><li><p>int、int?, long, long?</p></li><li><p>double、double?</p></li><li><p>DateTime、DateTime?</p></li><li><p>枚举类型、Nullable&lt;枚举类型&gt;</p></li><li><p>Byte[]</p></li></ul></div><div class="collapsibleAreaRegion" id="propertyLogic"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />属性逻辑扩展</span></div><div id="ID3RBSection" class="collapsibleSection"><p>一般属性的逻辑的扩展方式有以下三种：属性设置前回调、属性设置后回调、更换属性获取逻辑。这三种扩展都是通过在定义属性的同时指定该属性的元数据中的回调委托来完成的。</p><ul><li><p>编写属性变更前逻辑</p><p>
                            以下代码为 Warehouse（仓库）实体的 Name 属性添加属性变更前事件委托：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABCAABAAA_tab1" class="codeSnippetContainerTabSingle">编写属性变更前逻辑示例</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABCAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABCAABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EABCAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Property&lt;<span class="highlight-keyword">string</span>&gt; NameProperty = P&lt;Warehouse&gt;.Register(e =&gt; e.Name, <span class="highlight-keyword">new</span> PropertyMetadata&lt;<span class="highlight-keyword">string</span>&gt;
{
    PropertyChangingCallBack = (o, e) =&gt; (o <span class="highlight-keyword">as</span> Warehouse).OnNameChanging(e)
});
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name
{
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.GetProperty(NameProperty); }
    <span class="highlight-keyword">set</span> { <span class="highlight-keyword">this</span>.SetProperty(NameProperty, <span class="highlight-keyword">value</span>); }
}
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> OnNameChanging(ManagedPropertyChangingEventArgs&lt;<span class="highlight-keyword">string</span>&gt; e)
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">string</span>.IsNullOrWhiteSpace(e.Value))
    {
        e.Cancel = <span class="highlight-keyword">true</span>;
    }
    <span class="highlight-keyword">if</span> (e.Value.Length &gt; <span class="highlight-number">10</span>)
    {
        e.CoercedValue = e.Value.Substring(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABCAABAAA");</script><p>通过设置 PropertyMetadata.PropertyChangingCallBack 委托，来调用实体的实例方法 OnNameChanging，完成了两个功能：如果设置的值是空字符串，则忽略本次设置；如果设置的字符串长度大于 10，则只取字符串的前 10 个字符作为仓库的名称。同时，通过把 OnNameChanging 设计为实例虚方法，可以支持继承此类的子类方便地重写此处的逻辑。</p></li><li><p>编写属性变更后逻辑</p><p>
                            以下代码为 Warehouse（仓库）实体的 Name 属性添加属性变更后事件委托：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADBAABAAA_tab1" class="codeSnippetContainerTabSingle">编写属性变更后逻辑示例</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADBAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADBAABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EADBAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Property&lt;<span class="highlight-keyword">string</span>&gt; NameProperty = P&lt;Warehouse&gt;.Register(e =&gt; e.Name, <span class="highlight-keyword">new</span> PropertyMetadata&lt;<span class="highlight-keyword">string</span>&gt;
{
    PropertyChangedCallBack = (o, e) =&gt; (o <span class="highlight-keyword">as</span> Warehouse).OnNameChanged(e)
});
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name
{
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.GetProperty(NameProperty); }
    <span class="highlight-keyword">set</span> { <span class="highlight-keyword">this</span>.SetProperty(NameProperty, <span class="highlight-keyword">value</span>); }
}
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> OnNameChanged(ManagedPropertyChangedEventArgs e)
{
    <span class="highlight-keyword">string</span> oldName = e.OldValue <span class="highlight-keyword">as</span> <span class="highlight-keyword">string</span>;
    <span class="highlight-keyword">string</span> newName = e.NewValue <span class="highlight-keyword">as</span> <span class="highlight-keyword">string</span>;
    LogNameChanged(oldName, newName);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADBAABAAA");</script><p>通过设置 PropertyMetadata.PropertyChangedCallBack 委托，来调用实体的实例方法 OnNameChanged 方法。OnNameChanged 可以获取到属性变更前后的两个值，并记录到名称变更日志中。</p><p>
                            由于属性变更后事件使用场景较多，实体框架还提供了更简单的一种处理方法：实体的属性值在变更时，都会调用实体的 <span class="code">OnPropertyChanged</span> 方法。 <span class="code">Entity.OnPropertyChanged(ManagedPropertyChangedEventArgs e)</span> 虚方法，完成与上段代码相同的逻辑：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABAABAAA_tab1" class="codeSnippetContainerTabSingle">重写方法编写属性变更后逻辑示例</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABAABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAABAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnPropertyChanged(ManagedPropertyChangedEventArgs e)
{
    <span class="highlight-keyword">if</span> (e.Property == NameProperty)
    {
        <span class="highlight-keyword">string</span> oldName = e.OldValue <span class="highlight-keyword">as</span> <span class="highlight-keyword">string</span>;
        <span class="highlight-keyword">string</span> newName = e.NewValue <span class="highlight-keyword">as</span> <span class="highlight-keyword">string</span>;
        LogNameChanged(oldName, newName);
    }

    <span class="highlight-keyword">base</span>.OnPropertyChanged(e);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABAABAAA");</script></li><li><p>更换属性值获取逻辑</p><p>
                            一般情况下，只需要编写属性变更前逻辑就可以完全控制属性存储的值了。但是框架还额外提供了属性的获取逻辑委托，使得开发人员可以重写属性获取逻辑。（尽量使用属性变更前逻辑。）
                        </p><p>
                            以下代码为 Warehouse（仓库）实体的 Name 属性更换属性获取强制逻辑：
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAAABAAA_tab1" class="codeSnippetContainerTabSingle">编写属性变更前逻辑示例</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABAAABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EABAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Property&lt;<span class="highlight-keyword">string</span>&gt; NameProperty = P&lt;Warehouse&gt;.Register(e =&gt; e.Name, <span class="highlight-keyword">new</span> PropertyMetadata&lt;<span class="highlight-keyword">string</span>&gt;
{
    CoerceGetValueCallBack = (o, v) =&gt; (o <span class="highlight-keyword">as</span> Warehouse).CoerceGetName(v)
});
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name
{
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.GetProperty(NameProperty); }
    <span class="highlight-keyword">set</span> { <span class="highlight-keyword">this</span>.SetProperty(NameProperty, <span class="highlight-keyword">value</span>); }
}
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">string</span> CoerceGetName(<span class="highlight-keyword">string</span> <span class="highlight-keyword">value</span>)
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">value</span>.Length &gt; <span class="highlight-number">10</span>)
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">value</span>.Substring(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>);
    }
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">value</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAABAAA");</script><p>通过设置 PropertyMetadata.CoerceGetValueCallBack 委托，调用实体的实例方法 CoerceGetName，完成了与属性变更前事件相同的逻辑：如果名称的长度大于 10，则只返回前 10 个字符作为仓库的名称。而与重写设置前事件不同的地方在于，这个属性内部存储的值实际上长度是超过 10 的，只是通过 GetProperty 只能获取前 10 个字符而已。例如，如果设置了这个属性值为 "123456789012345"，在存储数据库中后，它的长度就是这个字符串，但是通过属性的获取方法，返回的是 "1234567890"。</p></li></ul></div></div></div><div id="pageFooter" class="pageFooter">有问题请联系 9474649@qq.com。<div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:9474649%40qq.com?Subject=Rafy User Guide">发送反馈</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>