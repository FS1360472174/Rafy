<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-zh-CN.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>领域实体</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="e9998e68-31e8-47d6-9e28-829aade5044e" /><meta name="Description" content="领域实体是实体框架中最重要的组件。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Rafy User Guide<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy User Guide" tocid="roottoc">Rafy User Guide</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy框架" tocid="69b641cf-d1fe-4f06-877f-b479d268a3fc">Rafy框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c8e6cd25-c674-4cd1-9880-816d11f58eb8.htm" title="领域实体框架" tocid="c8e6cd25-c674-4cd1-9880-816d11f58eb8">领域实体框架</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="e9998e68-31e8-47d6-9e28-829aade5044e.htm" title="领域实体" tocid="e9998e68-31e8-47d6-9e28-829aade5044e">领域实体</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1a5cb169-0f7c-479a-a854-88cd89478b1d.htm" title="实体的状态" tocid="1a5cb169-0f7c-479a-a854-88cd89478b1d">实体的状态</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="e0e55ab2-1e48-4acd-96ef-c889774bfecc.htm" title="实体关系" tocid="e0e55ab2-1e48-4acd-96ef-c889774bfecc">实体关系</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="8c0065bc-f165-4c69-81f4-9c3c57bd9ab9.htm" title="实体属性" tocid="8c0065bc-f165-4c69-81f4-9c3c57bd9ab9">实体属性</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="640ac9bb-0090-4b38-9763-bad4fca3adfb.htm" title="领域实体关系图" tocid="640ac9bb-0090-4b38-9763-bad4fca3adfb">领域实体关系图</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6b1f358e-0590-4d63-8697-b0a80349c4b0.htm" title="树型实体" tocid="6b1f358e-0590-4d63-8697-b0a80349c4b0">树型实体</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>领域实体</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>本页包含以下内容：</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#intro">简介</a></li><li class="outlineSectionEntry"><a href="#create">创建实体</a></li><li class="outlineSectionEntry"><a href="#attri">实体特性</a></li><li class="outlineSectionEntry"><a href="#ctor">构造函数</a></li><li class="outlineSectionEntry"><a href="#property">实体属性</a></li><li class="outlineSectionEntry"><a href="#list">实体列表类型</a></li><li class="outlineSectionEntry"><a href="#repo">实体仓库类型</a></li><li class="outlineSectionEntry"><a href="#config">实体配置类型</a></li><li class="outlineSectionEntry"><a href="#namingConvention">命名约定</a></li></ul></div><div class="collapsibleAreaRegion" id="intro"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />简介</span></div><div id="ID0RBSection" class="collapsibleSection"><p>领域实体是实体框架中最重要的组件。</p><p>
                    系统中所有实体类都必须直接或间接地从 <span class="code">Rafy.Domain.Entity</span> 类继承。该基类的设计支持属性的管理、关系的延迟加载、自动冗余属性、大对象属性、树型关系等。详情见本节下各小节。
                </p></div><div class="collapsibleAreaRegion" id="create"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />创建实体</span></div><div id="ID2RBSection" class="collapsibleSection"><p>安装 SDK 后，可以使用模板来创建一个新的实体。在项目中添加项，选中 "Rafy Domain Entity"，命名为 Role.cs，点击确定：</p><div class="mediaNear"><img alt="Domain Entity Add New Item" src="../media/DomainEntity_AddNewItem.jpg" /></div><p>在弹出的“添加领域实体”窗口中，填写相应的项：</p><div class="mediaNear"><img alt="Domain Entity Add New Item Window" src="../media/DomainEntity_AddNewItemWindow.jpg" /></div><p>各项说明：</p><ul><li><p>类名</p><p>该项就是实体的名称。同时会影响实体列表类、实体仓库类的名称。</p></li><li><p>组合父实体类名</p><p>如果该实体不是一个组合根实体，那么需要指定它所属的组合父实体名。这样，可以自动为两个类创建关系属性。</p></li><li><p>继承实体类名</p><p>如果该实体是继承自某个特定实体，那么需要指定它的父实体名。</p><p>由于每个实体项目在创建时，都会创建一个统一的基类。所以默认情况下，这里都使用该基类。例如这里是在 JXC 领域实体项目中添加实体，所以使用的默认是自动生成的 JXCEntity 实体基类。</p></li><li><p>领域名称</p><p>实体在领域中的名称。会生成到实体的注释中。</p><p>这里填写的名称，也会显示到领域关系图中。见：<a href="640ac9bb-0090-4b38-9763-bad4fca3adfb.htm">领域实体关系图</a>。</p></li></ul><p>经过以下步骤，就编写了一个比较简单的实体类。以下代码是生成的实体类代码文件：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABAIAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABAIAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABAIAAA');return false;" title="复制">复制</a></div></div><div id="ID1EABAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Linq;
<span class="highlight-keyword">using</span> System.Runtime.Serialization;
<span class="highlight-keyword">using</span> System.Security.Permissions;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> Rafy;
<span class="highlight-keyword">using</span> Rafy.Data;
<span class="highlight-keyword">using</span> Rafy.Domain.ORM;
<span class="highlight-keyword">using</span> Rafy.Domain;
<span class="highlight-keyword">using</span> Rafy.Domain.Validation;
<span class="highlight-keyword">using</span> Rafy.MetaModel;
<span class="highlight-keyword">using</span> Rafy.MetaModel.Attributes;
<span class="highlight-keyword">using</span> Rafy.MetaModel.View;
<span class="highlight-keyword">using</span> Rafy.ManagedProperty;

<span class="highlight-keyword">namespace</span> JXC
{
    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// 角色</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    [RootEntity, Serializable]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Role : JXCEntity
    {
        <span class="highlight-preprocessor">#region</span> 构造函数

        <span class="highlight-keyword">public</span> Role() { }

        [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">protected</span> Role(SerializationInfo info, StreamingContext context) : <span class="highlight-keyword">base</span>(info, context) { }

        <span class="highlight-preprocessor">#endregion</span>

        <span class="highlight-preprocessor">#region</span> 引用属性

        <span class="highlight-preprocessor">#endregion</span>

        <span class="highlight-preprocessor">#region</span> 组合子属性

        <span class="highlight-preprocessor">#endregion</span>

        <span class="highlight-preprocessor">#region</span> 一般属性

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> Property&lt;<span class="highlight-keyword">string</span>&gt; NameProperty = P&lt;Role&gt;.Register(e =&gt; e.Name);
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name
        {
            <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.GetProperty(NameProperty); }
            <span class="highlight-keyword">set</span> { <span class="highlight-keyword">this</span>.SetProperty(NameProperty, <span class="highlight-keyword">value</span>); }
        }

        <span class="highlight-preprocessor">#endregion</span>

        <span class="highlight-preprocessor">#region</span> 只读属性

        <span class="highlight-preprocessor">#endregion</span>
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// 角色 列表类。</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    [Serializable]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> RoleList : JXCEntityList { }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// 角色 仓库类。</span>
    <span class="highlight-comment">/// 负责 角色 类的查询、保存。</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> RoleRepository : JXCEntityRepository
    {
        <span class="highlight-comment">/// &lt;summary&gt;</span>
        <span class="highlight-comment">/// 单例模式，外界不可以直接构造本对象。</span>
        <span class="highlight-comment">/// &lt;/summary&gt;</span>
        <span class="highlight-keyword">protected</span> RoleRepository() { }
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// 角色 配置类。</span>
    <span class="highlight-comment">/// 负责 角色 类的实体元数据、界面元数据的配置。</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">internal</span> <span class="highlight-keyword">class</span> RoleConfig : JXCEntityConfig&lt;Role&gt;
    {
        <span class="highlight-comment">/// &lt;summary&gt;</span>
        <span class="highlight-comment">/// 配置实体的元数据</span>
        <span class="highlight-comment">/// &lt;/summary&gt;</span>
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> ConfigMeta()
        {
            <span class="highlight-comment">//配置实体的所有属性都映射到数据表中。</span>
            Meta.MapTable().MapAllProperties();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABAIAAA");</script><p>其中包含四个类型，接下来说明实体的各组成部分。</p></div><div class="collapsibleAreaRegion" id="attri"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实体特性</span></div><div id="ID3RBSection" class="collapsibleSection"><p>实体必须标记以下特性：</p><ul><li><p>
                            如果是组合根实体，需要标记 <span class="code">Rafy.MetaModel.Attributes.RootEntityAttribute</span>；非根实体，则标记 <span class="code">Rafy.MetaModel.Attributes.ChildEntityAttribute</span>。
                        </p></li><li><p>
                            标记 <span class="code">System.SerializableAttribute</span> 为可序列化实体，可支持分布式传输。
                        </p></li></ul></div><div class="collapsibleAreaRegion" id="ctor"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />构造函数</span></div><div id="ID4RBSection" class="collapsibleSection"><p>自动生成了两个实体的构造函数，一个用于外部直接构造实体，一个用于序列化。二者都不能被删除。</p></div><div class="collapsibleAreaRegion" id="property"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实体属性</span></div><div id="ID5RBSection" class="collapsibleSection"><p>构造函数之后，是属性的代码区域。实体的属性是实体最重要的组成部分，分为四大部分，详见：<a href="bae4aeb4-e6a9-4d1f-9bbd-1a4199303ba5.htm">引用属性</a>、<a href="770d700d-acf8-40fd-abc2-a580725a14fb.htm">组合子属性</a>、<a href="3ad175ff-a917-4e84-931f-f845285187ed.htm">一般属性</a>、<a href="711304c2-d2a3-4ec9-abd8-00edd86fb3ca.htm">只读属性</a>。</p></div><div class="collapsibleAreaRegion" id="list"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实体列表类型</span></div><div id="ID6RBSection" class="collapsibleSection"><p>实体列表类是实体的一个集合类型。一般很少在其中编写代码，但是它在框架中起到非常重要的作用。详见：<a href="865b535e-d23f-45fe-912a-5b7759aa11a8.htm">实体集合</a>。</p></div><div class="collapsibleAreaRegion" id="repo"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实体仓库类型</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
                    实体仓库类的职责是管理实体，并实现实体的持久化保存功能。详见：<a href="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7.htm">实体仓库</a>。</p></div><div class="collapsibleAreaRegion" id="config"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实体配置类型</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
                    实体配置类型的职责是修改实体的元数据。详见：<a href="4ea5b738-5d08-4646-a263-6c1ae8ee3e8c.htm">实体配置</a>。</p></div><div class="collapsibleAreaRegion" id="namingConvention"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />命名约定</span></div><div id="ID9RBSection" class="collapsibleSection"><p>实体类、实体列表类、实体仓库类必须满足以下命名约定：</p><ul><li><p>实体列表类名 = 实体类名 + "List"。</p></li><li><p>实体仓库类名 = 实体类名 + "Repository"。</p></li></ul></div></div></div><div id="pageFooter" class="pageFooter">有问题请联系 9474649@qq.com。<div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:9474649%40qq.com?Subject=Rafy User Guide">发送反馈</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>