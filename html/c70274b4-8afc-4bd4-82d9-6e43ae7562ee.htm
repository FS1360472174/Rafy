<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-zh-CN.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>大批量导入实体</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="c70274b4-8afc-4bd4-82d9-6e43ae7562ee" /><meta name="Description" content="某些场景下，开发者希望能够大批量地把实体的数据导入到数据库中。虽然使用实体仓库保存实体列表非常方便，但是其内部实现机制是一条一条的保存到数据库，当实体的个数较多时，效率就会很低。所以 Rafy 设计了批量导入插件程序，其内部使用 ADO.NET 及 ODP.NET 中的批量导入机制来把大量数据一次性导入到数据库中。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Rafy User Guide<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy User Guide" tocid="roottoc">Rafy User Guide</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="69b641cf-d1fe-4f06-877f-b479d268a3fc.htm" title="Rafy框架" tocid="69b641cf-d1fe-4f06-877f-b479d268a3fc">Rafy框架</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c8e6cd25-c674-4cd1-9880-816d11f58eb8.htm" title="领域实体框架" tocid="c8e6cd25-c674-4cd1-9880-816d11f58eb8">领域实体框架</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7.htm" title="实体仓库" tocid="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7">实体仓库</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="019647a4-5ae0-4a43-b529-6b2d7c70b46c.htm" title="实体的创建、删除、修改" tocid="019647a4-5ae0-4a43-b529-6b2d7c70b46c">实体的创建、删除、修改</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="59c80aec-c910-4880-b165-c3495ed5eb3e.htm" title="编写查询" tocid="59c80aec-c910-4880-b165-c3495ed5eb3e">编写查询</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="c70274b4-8afc-4bd4-82d9-6e43ae7562ee.htm" title="大批量导入实体" tocid="c70274b4-8afc-4bd4-82d9-6e43ae7562ee">大批量导入实体</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6928689f-c384-4ce0-9969-b3570fedf996.htm" title="仓库数据层（RepositoryDataProvider）" tocid="6928689f-c384-4ce0-9969-b3570fedf996">仓库数据层（RepositoryDataProvider）</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="点击或拖拽改变大小" title="点击或拖拽改变大小" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>大批量导入实体</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
                某些场景下，开发者希望能够大批量地把实体的数据导入到数据库中。虽然使用实体仓库保存实体列表非常方便，但是其内部实现机制是一条一条的保存到数据库，当实体的个数较多时，效率就会很低。所以 Rafy 设计了批量导入插件程序，其内部使用 ADO.NET 及 ODP.NET 中的批量导入机制来把大量数据一次性导入到数据库中。
            </p><p>本页包含以下内容：</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#howToUse">使用方法</a></li><li class="outlineSectionEntry"><a href="#caution">注意</a></li><li class="outlineSectionEntry"><a href="#bad">缺点</a></li><li class="outlineSectionEntry"><a href="#inner">实现原理</a></li></ul></div><div class="collapsibleAreaRegion" id="howToUse"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />使用方法</span></div><div id="ID1RBSection" class="collapsibleSection"><p /><h3 class="procedureSubHeading">步骤</h3><div class="subSection"><ol><li><p>由于批量导入功能是一个额外的程序集，所以在使用该功能时，需要先使用 NuGet 引用最新版本的 Rafy.Domain.ORM.BatchSubmit 程序集。</p></li><li><p>如果准备导入 ORACLE 数据库，则也需要引用 Oracle.ManagedDataAccess(12.1.022 以上版本) 程序集。</p></li><li><p>修改需要保存大量实体的代码，例如，原代码如下：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAAAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAAAAAEAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACAAAAAEAAA');return false;" title="复制">复制</a></div></div><div id="ID0EACAAAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> books = <span class="highlight-keyword">new</span> BookList();
<span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">1000000</span>; i++)
{
    <span class="highlight-keyword">var</span> book = <span class="highlight-keyword">new</span> Book
    {
        ChapterList =
        {
            <span class="highlight-keyword">new</span> Chapter(),
            <span class="highlight-keyword">new</span> Chapter(),
        }
    };
    books.Add(book);
}

<span class="highlight-comment">//直接使用实体仓库进行保存。</span>
repo.Save(books);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAAAAAEAAA");</script><p>需要把最后一行使用仓库保存实体列表，修改为创建导入器来保存实体列表：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAAAAEAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAAAAEAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAAAAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">//创建一个批量导入器进行保存。</span>
repo.CreateImporter().Save(books);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAAAEAAA");</script></li></ol></div></div><div class="collapsibleAreaRegion" id="caution"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />注意</span></div><div id="ID2RBSection" class="collapsibleSection"><ul><li><p>从上面的代码可以看出，批量导入程序是面向整个聚合的。也就是说，批量导入父实体时，同时也会批量导入父实体下的所有子实体。</p></li><li><p>批量导入不但支持添加新实体，同时也支持批量更新、批量删除。使用方法与使用仓库保持一致。</p></li><li><p>对于大批量的数据，使用批量导入，比直接使用仓库来保存实体，速度要快两个数据级左右。</p></li><li><p>目前批量导入实体的功能，只支持 Oracle 和 SqlServer 两个数据库。</p></li><li><p>在使用 Oracle 数据库时，还需要在数据库生成完成后，特别地调用以下代码以启用某个聚合实体的批量导入功能，否则导入过程中会抛出异常（原因请见后面的实现原理章节）。代码如下：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAADAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Rafy.Domain.ORM.BatchSubmit.Oracle.OracleBatchImporter.EnableBatchSequence(
    RF.ResolveInstance&lt;OriginalDataRepository&gt;()
    );</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAADAAA");</script></li></ul></div><div class="collapsibleAreaRegion" id="bad"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />缺点</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    目前，大批量导入实体的功能是由一个单独的插件以新的方式完成的。虽然性能非常好，但是它只是简单地把数据快速地导入数据库中，并不能支持仓库、仓库数据提供器中许多内置的功能和扩展点（例如 RepositoryDataProvider 中的 Inserting、Updating、Deleting、Querying 等事件以及相应的虚方法等都不会发生）。这将会导致一些功能失效，如：更新实体时冗余属性不会自动更新、时间戳插件的功能无效。
                </p><p>
                    较好的性能往往与更多的功能和扩展性冲突。为了应对大数据的导入，在使用本插件的同时，开发者不得不额外地人工处理这些缺失的功能；所以，除了对性能非常敏感的应用场景以外，为了保证更好的扩展性与强大的功能，尽量不要使用大数据批量导入功能。
                </p></div><div class="collapsibleAreaRegion" id="inner"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />实现原理</span></div><div id="ID4RBSection" class="collapsibleSection"><p>下面简要介绍批量导入的原理。</p><h4 class="subHeading">Sql Server</h4><div class="subsection"><p>对于 Sql Server 数据库的批量保存：</p><ul><li><p>
                                    批量新增数据，是使用 <span class="code">System.Data.SqlClient.SqlBulkCopy</span> 来实现的。
                                </p></li><li><p>
                                    批量更新数据，是使用 <span class="code">System.Data.SqlClient.SqlDataAdapter</span> 来实现的。
                                </p></li><li><p>批量删除数据，则是直接拼接 SQL 语句，把需要删除的实体的 Id 放到 In 语句中进行删除。例如：</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAAACABAAA');return false;" title="复制">复制</a></div></div><div id="ID0EAAAAACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">DELETE</span> <span class="highlight-keyword">FROM</span> Books <span class="highlight-keyword">WHERE</span> Id <span class="highlight-keyword">IN</span> (<span class="highlight-number">1</span>,<span class="highlight-number">3</span>,<span class="highlight-number">5</span>,<span class="highlight-number">7</span>......);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAACABAAA");</script></li></ul></div><h4 class="subHeading">Oracle</h4><div class="subsection"><p>对于 Oracle 数据库的批量保存：</p><ul><li><p>新增数据、更新数据都是使用 ODP.NET 中原生的批量导入功能。</p><p>
                                    参见：<span class="code">Oracle.ManagedDataAccess.Client.OracleCommand.ArrayBindCount</span> 属性。
                                </p></li><li><p>而删除数据的实现则和 SQLServer 的实现一致，均是拼接 DELETE 语句。</p></li></ul></div><h4 class="subHeading">新增大量实体时，实体的 Id 生成</h4><div class="subsection"><p>一般情况下，使用仓库保存一个新增的实体时，仓库会使用数据库本身的机制来为实体生成 Id，在 SQLServer 中是使用 IDENTITY 列，在 ORACLE 中则是使用每个表对应的 SEQUENCE 来生成。但是，批量导入大量新实体时，为了性能上的考虑，则需要一次性为需要保存的所有新实体统一生成 Id。</p><p>在 SQLServer 中，可以方便地使用 SQL 语句调整表中 IDENTITY 下一次的值，所以实现比较简单。只需要设置 IDENTITY 下一次的值 + 100000，并使用中间跳过的这些值来作为实体的 Id 即可。</p><p>但是在 ORACLE 中，如果去调整 SEQUENCE 的值，则属于 DDL 语句，会隐式自动提交事务，会造成数据的错误。所以我们最终决定：如果在 ORACLE 中要使用批量导入功能，数据表对应的 SEQUENCE 必须以较大的数字为步距（如 ALTER SEQUENCE "SEQ_TABLE_ID" INCREMENT BY 100000 NOCACHE）。这样，在批量导入时，就不再需要增修改 SEQUENCE 的步距，而直接使用中间跳过的这些值作为实体的 Id。这样做也比较方便，但是负面效果则是使用仓库保存单一实体时，两次保存不同实体生成的 Id 会相差 100000，不再是连续的。</p></div></div></div></div><div id="pageFooter" class="pageFooter">有问题请联系 9474649@qq.com。<div class="feedbackLink">有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:9474649%40qq.com?Subject=Rafy User Guide">发送反馈</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>